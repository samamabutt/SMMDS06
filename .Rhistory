result<-head(comb_reversed_two,4)
return (result)
}
picture(etEigVectors2(eigen(cov(X2))))
picture(getEigVectors2(eigen(cov(X2))))
picture(getEigVectors2(eigen(cov(X2))),TRUE,4)
getEigVectors2<-function(ei,flag,numb){
comb_two = data.frame(t(ei$vectors), ei$values)
comb_reversed_two = comb_two[order(comb_two[,ncol(comb_two)],decreasing=TRUE),]
if(flag){
result<-head(comb_reversed_two,numb)
}else{
result<-tail(comb_reversed_two,numb)
}
return (result)
}
picture(getEigVectors2(eigen(cov(X2))),TRUE,4)
picture(getEigVectors2(eigen(cov(X2)),TRUE,4))
picturepicture(getEigVectors2(eigen(cov(X2)),FALSE,4))
getEigVectors2<-function(ei,flag,numb){
comb_two = data.frame(t(ei$vectors), ei$values)
comb_reversed_two = comb_two[order(comb_two[,ncol(comb_two)],decreasing=TRUE),]
if(flag==TRUE){
result<-head(comb_reversed_two,numb)
}
if(flag==FALSE){
result<-tail(comb_reversed_two,numb)
}
return (result)
}
picturepicture(getEigVectors2(eigen(cov(X2)),FALSE,4))
picture(getEigVectors2(eigen(cov(X2)),FALSE,4))
picture(getEigVectors2(eigen(cov(X3)),TRUE,4))
picture(getEigVectors2(eigen(cov(X3)),TRUE,4))
library(EBImage)
j = matrix( nrow=0,ncol=1024)
for (i in 1:10){
img = readImage(paste("E:/MS DS/SMMDS/Assignment 5/images/",i,".jpg",sep=''))
colorMode(img) = Grayscale
display(img, all=TRUE)
u <- resize(img, w = 32, h = 32)
u <- matrix(u, nrow = 1, ncol=1024)
j<-rbind(j,u)
}
picture(getEigVectors2(eigen(cov(j)),TRUE,1))
picture(getEigVectors2(eigen(cov(j)),FALSE,1))
X = as.matrix(read.table("E:/MS DS/SMMDS/Assignment 5/ocr.txt", quote="\"", comment.char=""))
ocr = as.matrix(read.table("E:/MS DS/SMMDS/Assignment 5/ocr.lables", quote="\"", comment.char=""))
r = X[1,]            #first digit image, i.e., image in row 1
im = matrix(r,nrow=16,byrow=TRUE)    #convert vector to image
image(im[,ncol(im):1])   #view image Similarly you can view any image you like for any row of train and test matrices
XC = X - rep(colMeans(X), rep.int(nrow(X), ncol(X)))
B = XC%*%t(XC)
getEigValues<-function(ei,head, tail, numb){
eigenValue = sort(ei$values, decreasing = TRUE)
if(head){
eigenValue = head(eigenValue, numb)
}
if(tail){
eigenValue = tail(eigenValue, numb)
}
return(eigenValue)
}
eigValue<-getEigValues(eigen(B),TRUE,FALSE,2)
S<-diag(sqrt(eigValue),2,2)
V<-getEigVectors(eigen(B),getEigValues(eigen(B),TRUE,FALSE,2))
getEigVectors<-function(ei,eigValue){
L<-c()
for (i in eigValue){
L<-cbind(L,c(ei$vectors[ei$values == i]))
}
return (L)
}
Z = V%*% S
Z<-cbind(Z,c(ocr))
labels = Z[,ncol(Z)]
twoClass = labels==2
threeClass = labels==3
fourClass = labels==4
twoDat = Z[twoClass,]
threeDat = Z[threeClass,]
fourDat = Z[fourClass,]
plot(twoDat[,1],twoDat[,2],col="blue",xlab="Feature 1",ylab="Feature 2")
points(threeDat[,1],threeDat[,2],col="green",pch=24)
points(fourDat[,1],fourDat[,2],col="red",pch=3)
legend("topleft",c("Digit 2","Digit 3","Digit 4"),col=c("blue","green","red"), cex=0.8,pch=1:3)
P<-cbind(X,c(ocr))
class = P[,ncol(P)]
twolabel = class==2
twoRec = P[twolabel,]
threelabel = class==3
threeRec = P[threelabel,]
X2 = twoRec[,-ncol(twoRec)]
X3 = threeRec[,-ncol(threeRec)]
getEigVectors2<-function(ei,flag,numb){
comb_two = data.frame(t(ei$vectors), ei$values)
comb_reversed_two = comb_two[order(comb_two[,ncol(comb_two)],decreasing=TRUE),]
if(flag==TRUE){
result<-head(comb_reversed_two,numb)
}
if(flag==FALSE){
result<-tail(comb_reversed_two,numb)
}
return (result)
}
picture <- function(rt) {
rt =  rt[1:(length(rt) - 1)]
for (j in 1:nrow(rt)){
r = rt[j,]
im = matrix(unlist(r), nrow = 16, byrow = TRUE)
image(im[,ncol(im):1])
}
}
picture(getEigVectors2(eigen(cov(X2)),TRUE,4))
picture(getEigVectors2(eigen(cov(X2)),FALSE,4))
picture(getEigVectors2(eigen(cov(X3)),TRUE,4))
picture(getEigVectors2(eigen(cov(X3)),TRUE,4))
library(EBImage)
j = matrix( nrow=0,ncol=1024)
for (i in 1:10){
img = readImage(paste("E:/MS DS/SMMDS/Assignment 5/images/",i,".jpg",sep=''))
colorMode(img) = Grayscale
display(img, all=TRUE)
u <- resize(img, w = 32, h = 32)
u <- matrix(u, nrow = 1, ncol=1024)
j<-rbind(j,u)
}
picture(getEigVectors2(eigen(cov(j)),TRUE,1))
picture(getEigVectors2(eigen(cov(j)),FALSE,1))
getEigVectors<-function(ei,eigValue){
L<-c()
for (i in eigValue){
L<-cbind(L,c(ei$vectors[ei$values == i]))
}
return (L)
}
V<-getEigVectors(eigen(B),getEigValues(eigen(B),TRUE,FALSE,2))
Z = V%*% S
Z = V%*% S
Z<-cbind(Z,c(ocr))
labels = Z[,ncol(Z)]
twoClass = labels==2
threeClass = labels==3
fourClass = labels==4
twoDat = Z[twoClass,]
threeDat = Z[threeClass,]
fourDat = Z[fourClass,]
plot(twoDat[,1],twoDat[,2],col="blue",xlab="Feature 1",ylab="Feature 2")
points(threeDat[,1],threeDat[,2],col="green",pch=24)
points(fourDat[,1],fourDat[,2],col="red",pch=3)
legend("topleft",c("Digit 2","Digit 3","Digit 4"),col=c("blue","green","red"), cex=0.8,pch=1:3)
X = as.matrix(read.table("E:/MS DS/SMMDS/Assignment 5/ocr.txt", quote="\"", comment.char=""))
ocr = as.matrix(read.table("E:/MS DS/SMMDS/Assignment 5/ocr.lables", quote="\"", comment.char=""))
r = X[1,]            #first digit image, i.e., image in row 1
im = matrix(r,nrow=16,byrow=TRUE)    #convert vector to image
image(im[,ncol(im):1])   #view image Similarly you can view any image you like for any row of train and test matrices
XC = X - rep(colMeans(X), rep.int(nrow(X), ncol(X)))
B = XC%*%t(XC)
getEigValues<-function(ei,head, tail, numb){
eigenValue = sort(ei$values, decreasing = TRUE)
if(head){
eigenValue = head(eigenValue, numb)
}
if(tail){
eigenValue = tail(eigenValue, numb)
}
return(eigenValue)
}
eigValue<-getEigValues(eigen(B),TRUE,FALSE,2)
S<-diag(sqrt(eigValue),2,2)
V<-getEigVectors(eigen(B),getEigValues(eigen(B),TRUE,FALSE,2))
getEigVectors<-function(ei,eigValue){
L<-c()
for (i in eigValue){
L<-cbind(L,c(ei$vectors[ei$values == i]))
}
return (L)
}
Z = V%*% S
Z<-cbind(Z,c(ocr))
labels = Z[,ncol(Z)]
twoClass = labels==2
threeClass = labels==3
fourClass = labels==4
twoDat = Z[twoClass,]
threeDat = Z[threeClass,]
fourDat = Z[fourClass,]
plot(twoDat[,1],twoDat[,2],col="blue",xlab="Feature 1",ylab="Feature 2")
points(threeDat[,1],threeDat[,2],col="green",pch=24)
points(fourDat[,1],fourDat[,2],col="red",pch=3)
legend("topleft",c("Digit 2","Digit 3","Digit 4"),col=c("blue","green","red"), cex=0.8,pch=1:3)
P<-cbind(X,c(ocr))
class = P[,ncol(P)]
twolabel = class==2
twoRec = P[twolabel,]
threelabel = class==3
threeRec = P[threelabel,]
X2 = twoRec[,-ncol(twoRec)]
X3 = threeRec[,-ncol(threeRec)]
getEigVectors2<-function(ei,flag,numb){
comb_two = data.frame(t(ei$vectors), ei$values)
comb_reversed_two = comb_two[order(comb_two[,ncol(comb_two)],decreasing=TRUE),]
if(flag==TRUE){
result<-head(comb_reversed_two,numb)
}
if(flag==FALSE){
result<-tail(comb_reversed_two,numb)
}
return (result)
}
picture <- function(rt) {
rt =  rt[1:(length(rt) - 1)]
for (j in 1:nrow(rt)){
r = rt[j,]
im = matrix(unlist(r), nrow = 16, byrow = TRUE)
image(im[,ncol(im):1])
}
}
picture(getEigVectors2(eigen(cov(X2)),TRUE,4))
picture(getEigVectors2(eigen(cov(X2)),FALSE,4))
picture(getEigVectors2(eigen(cov(X3)),TRUE,4))
picture(getEigVectors2(eigen(cov(X3)),TRUE,4))
library(EBImage)
j = matrix( nrow=0,ncol=1024)
for (i in 1:10){
img = readImage(paste("E:/MS DS/SMMDS/Assignment 5/images/",i,".jpg",sep=''))
colorMode(img) = Grayscale
display(img, all=TRUE)
u <- resize(img, w = 32, h = 32)
u <- matrix(u, nrow = 1, ncol=1024)
j<-rbind(j,u)
}
picture(getEigVectors2(eigen(cov(j)),TRUE,1))
picture(getEigVectors2(eigen(cov(j)),FALSE,1))
train = as.matrix(read.table("train2_5.txt", quote="\"", comment.char=""))
train_labels = as.matrix(read.table("train2_5Labels.txt", quote="\"", comment.char=""))
test = as.matrix(read.table("test2_5.txt", quote="\"", comment.char=""))
test_labels = as.matrix(read.table("test2_5Labels.txt", quote="\"", comment.char=""))
r = train[1,]          #first digit image, i.e., image in row 1
k = train_labels[1,]
'r = data.matrix(r)
dim(r) = c(16,16)
image(r)   #view image'
trainGradientDescent <- function(X,Y,learningRate,momentum){
X<-cbind(X,c(1))
W<-matrix(data = runif(257,min = 0,max = 0.1), nrow = 1, ncol = 257, byrow = TRUE,
dimnames = NULL)
deltaOld<-matrix(data = 0, nrow = 1, ncol = 257, byrow = TRUE,
dimnames = NULL)
for (i in 1:100){
for (k in 1:nrow(X)){
Yhat<-X%*%t(W)
YDiff<-Y-Yhat
delta<-learningRate*(YDiff[k,]) * X[k,]
delta<-momentum*(deltaOld) + (delta)
W<-W+delta
deltaOld = delta
}
}
return (W)
}
train = as.matrix(read.table("train2_5.txt", quote="\"", comment.char=""))
train_labels = as.matrix(read.table("train2_5Labels.txt", quote="\"", comment.char=""))
test = as.matrix(read.table("test2_5.txt", quote="\"", comment.char=""))
test_labels = as.matrix(read.table("test2_5Labels.txt", quote="\"", comment.char=""))
setwd("E:/MS DS/SMMDS/Assignment 6")
train = as.matrix(read.table("train2_5.txt", quote="\"", comment.char=""))
train_labels = as.matrix(read.table("train2_5Labels.txt", quote="\"", comment.char=""))
test = as.matrix(read.table("test2_5.txt", quote="\"", comment.char=""))
test_labels = as.matrix(read.table("test2_5Labels.txt", quote="\"", comment.char=""))
trainGradientDescent <- function(X,Y,learningRate,momentum){
X<-cbind(X,c(1))
W<-matrix(data = runif(257,min = 0,max = 0.1), nrow = 1, ncol = 257, byrow = TRUE,
dimnames = NULL)
deltaOld<-matrix(data = 0, nrow = 1, ncol = 257, byrow = TRUE,
dimnames = NULL)
for (i in 1:100){
for (k in 1:nrow(X)){
Yhat<-X%*%t(W)
YDiff<-Y-Yhat
delta<-learningRate*(YDiff[k,]) * X[k,]
delta<-momentum*(deltaOld) + (delta)
W<-W+delta
deltaOld = delta
}
}
return (W)
}
testGradientDescent <- function (testX,regressionCoefficients){
testX<-cbind(testX,c(1))
return(testX%*%t(regressionCoefficients))
}
L<-c()
#L<-cbind(L,trainGradientDescent(train,train_labels,0.001,0))
L<-cbind(L,c(testGradientDescent(train,trainGradientDescent(train,train_labels,0.0001,0))),c(train_labels))
View(L)
L<-c()
#L<-cbind(L,trainGradientDescent(train,train_labels,0.001,0))
L<-cbind(L,c(testGradientDescent(train,trainGradientDescent(train,train_labels,0.001,0))),c(train_labels))
View(L)
trueClass = train_labels==2
nrow(trueClass)
trueClass = train_labels==2
nrow(train_labels[trueClass,])
count(train_labels, vars = 2, wt_var = NULL)
Matrix <- function(prediction,actualLabels){
fiveClass = prediction > 3.5			#this will give you all indices of class = 1
twoClass = prediction < 3.5			#this will give you all indices of class = 0
prediction[fiveClass,] = 5
prediction[twoClass,] = 2
TP = (prediction == 2 & actualLabels == 2)
FN = (prediction == 5 & actualLabels == 2)
TN = (prediction == 5 & actualLabels == 5)
FP = (prediction == 2 & actualLabels == 5)
count_tp = length(actualLabels[TP,])
count_fn = length(actualLabels[FN,])
count_tn = length(actualLabels[TN,])
count_fp = length(actualLabels[FP,])oneClass = labels==1			#this will give you all indices of class = 1
' trueClass = actualLabels==2		#this will give you all indices of class = 0
trueDat = trainX[trueClass,]		#this will give you the data matrix for class = 1
zeroDat = trainX[zeroClass,]		#this will give you the data matrix for class = 0
'
#BalancedAccuracyRate = (count_tp/totalPositiveLabels+count_tn/totalNegativeLabels)/2
cat("TP",count_tp,"\n","FN",count_fn,"\n","TN",count_tn,"\n","FP",count_fp,"\n")
#return(BalancedAccuracyRate)
}
Matrix <- function(prediction,actualLabels){
fiveClass = prediction > 3.5			#this will give you all indices of class = 1
twoClass = prediction < 3.5			#this will give you all indices of class = 0
prediction[fiveClass,] = 5
prediction[twoClass,] = 2
TP = (prediction == 2 & actualLabels == 2)
FN = (prediction == 5 & actualLabels == 2)
TN = (prediction == 5 & actualLabels == 5)
FP = (prediction == 2 & actualLabels == 5)
count_tp = length(actualLabels[TP,])
count_fn = length(actualLabels[FN,])
count_tn = length(actualLabels[TN,])
count_fp = length(actualLabels[FP,])
#oneClass = actualLabels==1			#this will give you all indices of class = 1
' trueClass = actualLabels==2		#this will give you all indices of class = 0
trueDat = trainX[trueClass,]		#this will give you the data matrix for class = 1
zeroDat = trainX[zeroClass,]		#this will give you the data matrix for class = 0
'
#BalancedAccuracyRate = (count_tp/totalPositiveLabels+count_tn/totalNegativeLabels)/2
cat("TP",count_tp,"\n","FN",count_fn,"\n","TN",count_tn,"\n","FP",count_fp,"\n")
#return(BalancedAccuracyRate)
}
Matrix(testGradientDescent(train,trainGradientDescent(train,train_labels,0.001,0)),train_labels)
a <- table(train_labels)
a[names(a)==2]
a <- table(train_labels)
a[names(a)==2]
a[names(a)==5]
a <- table(actualLabels)
a
a <- table(train_labels)
a
a <- table(train_labels)
a[1]
a <- table(train_labels)
b=a[1]
print(b)
a <- table(train_labels)
b=a[1]
print(b[1])
Matrix <- function(prediction,actualLabels){
fiveClass = prediction > 3.5			#this will give you all indices of class = 1
twoClass = prediction < 3.5			#this will give you all indices of class = 0
prediction[fiveClass,] = 5
prediction[twoClass,] = 2
TP = (prediction == 2 & actualLabels == 2)
FN = (prediction == 5 & actualLabels == 2)
TN = (prediction == 5 & actualLabels == 5)
FP = (prediction == 2 & actualLabels == 5)
count_tp = length(actualLabels[TP,])
count_fn = length(actualLabels[FN,])
count_tn = length(actualLabels[TN,])
count_fp = length(actualLabels[FP,])
label <- table(actualLabels)
totalPositiveLabels = label[1]
totalNegativeLabels = label[2]
BalancedAccuracyRate = (count_tp/totalPositiveLabels+count_tn/totalNegativeLabels)/2
cat("TP",count_tp,"\n","FN",count_fn,"\n","TN",count_tn,"\n","FP",count_fp,"\n")
return(BalancedAccuracyRate)
}
Matrix(testGradientDescent(train,trainGradientDescent(train,train_labels,0.001,0)),train_labels)
label <- table(actualLabels)
label[label==5]
label <- table(train_labels)
label[label==5]
label <- table(train_labels)
label[name(label)==5]
label <- table(train_labels)
label[names(label)==5]
length(train_labels[train_labels==5])
Matrix <- function(prediction,actualLabels){
fiveClass = prediction > 3.5			#this will give you all indices of class = 1
twoClass = prediction < 3.5			#this will give you all indices of class = 0
prediction[fiveClass,] = 5
prediction[twoClass,] = 2
TP = (prediction == 2 & actualLabels == 2)
FN = (prediction == 5 & actualLabels == 2)
TN = (prediction == 5 & actualLabels == 5)
FP = (prediction == 2 & actualLabels == 5)
count_tp = length(actualLabels[TP,])
count_fn = length(actualLabels[FN,])
count_tn = length(actualLabels[TN,])
count_fp = length(actualLabels[FP,])
totalPositiveLabels = length(actualLabels[actualLabels==2])
totalNegativeLabels = length(actualLabels[actualLabels==5])
BalancedAccuracyRate = (count_tp/totalPositiveLabels+count_tn/totalNegativeLabels)/2
cat("TP",count_tp,"\n","FN",count_fn,"\n","TN",count_tn,"\n","FP",count_fp,"\n")
return(BalancedAccuracyRate)
}
Matrix(testGradientDescent(train,trainGradientDescent(train,train_labels,0.001,0)),train_labels)
Matrix(testGradientDescent(test,trainGradientDescent(train,train_labels,0.001,0)),test_labels)
Matrix(testGradientDescent(train,trainGradientDescent(train,train_labels,0.7,0.9)),train_labels)
Matrix(testGradientDescent(test,trainGradientDescent(train,train_labels,0.1,0.5)),test_labels)
Matrix(testGradientDescent(train,trainGradientDescent(train,train_labels,0.0001,0.1)),train_labels)
Matrix(testGradientDescent(test,trainGradientDescent(train,train_labels,0.0001,0.1)),test_labels)
trainGradientDescent <- function(X,Y,learningRate,momentum){
X<-cbind(X,c(1))
W<-matrix(data = runif(257,min = 0,max = 0.1), nrow = 1, ncol = 257, byrow = TRUE,
dimnames = NULL)
deltaOld<-matrix(data = 0, nrow = 1, ncol = 257, byrow = TRUE,
dimnames = NULL)
for (i in 1:1000){
for (k in 1:nrow(X)){
Yhat<-X%*%t(W)
YDiff<-Y-Yhat
delta<-learningRate*(YDiff[k,]) * X[k,]
delta<-momentum*(deltaOld) + (delta)
W<-W+delta
deltaOld = delta
}
}
return (W)
}
Matrix(testGradientDescent(train,trainGradientDescent(train,train_labels,0.0001,0.1)),train_labels)
Matrix(testGradientDescent(test,trainGradientDescent(train,train_labels,0.0001,0.1)),test_labels)
trainGradientDescent <- function(X,Y,learningRate,momentum){
X<-cbind(X,c(1))
W<-matrix(data = runif(257,min = 0,max = 0.1), nrow = 1, ncol = 257, byrow = TRUE,
dimnames = NULL)
deltaOld<-matrix(data = 0, nrow = 1, ncol = 257, byrow = TRUE,
dimnames = NULL)
for (i in 1:50){
for (k in 1:nrow(X)){
Yhat<-X%*%t(W)
YDiff<-Y-Yhat
delta<-learningRate*(YDiff[k,]) * X[k,]
delta<-momentum*(deltaOld) + (delta)
W<-W+delta
deltaOld = delta
}
}
return (W)
}
Matrix(testGradientDescent(train,trainGradientDescent(train,train_labels,0.0001,0.1)),train_labels)
Matrix(testGradientDescent(test,trainGradientDescent(train,train_labels,0.0001,0.1)),test_labels)
Matrix(testGradientDescent(train,trainGradientDescent(train,train_labels,0.0001,0.001)),train_labels)
Matrix(testGradientDescent(test,trainGradientDescent(train,train_labels,0.0001,0.001)),test_labels)
w
L
View(W)
train = as.matrix(read.table("train2_5.txt", quote="\"", comment.char=""))
train_labels = as.matrix(read.table("train2_5Labels.txt", quote="\"", comment.char=""))
test = as.matrix(read.table("test2_5.txt", quote="\"", comment.char=""))
test_labels = as.matrix(read.table("test2_5Labels.txt", quote="\"", comment.char=""))
trainGradientDescent <- function(X,Y,learningRate,momentum){
X<-cbind(X,c(1))
W<-matrix(data = runif(257,min = 0,max = 0.1), nrow = 1, ncol = 257, byrow = TRUE,
dimnames = NULL)
deltaOld<-matrix(data = 0, nrow = 1, ncol = 257, byrow = TRUE,
dimnames = NULL)
for (i in 1:100){
for (k in 1:nrow(X)){
Yhat<-X%*%t(W)
YDiff<-Y-Yhat
delta<-learningRate*(YDiff[k,]) * X[k,]
delta<-momentum*(deltaOld) + (delta)
W<-W+delta
deltaOld = delta
}
}
return (W)
}
testGradientDescent <- function (testX,regressionCoefficients){
testX<-cbind(testX,c(1))
return(testX%*%t(regressionCoefficients))
}
Matrix <- function(prediction,actualLabels){
fiveClass = prediction > 3.5			#this will give you all indices of class = 1
twoClass = prediction < 3.5			#this will give you all indices of class = 0
prediction[fiveClass,] = 5
prediction[twoClass,] = 2
TP = (prediction == 2 & actualLabels == 2)
FN = (prediction == 5 & actualLabels == 2)
TN = (prediction == 5 & actualLabels == 5)
FP = (prediction == 2 & actualLabels == 5)
count_tp = length(actualLabels[TP,])
count_fn = length(actualLabels[FN,])
count_tn = length(actualLabels[TN,])
count_fp = length(actualLabels[FP,])
totalPositiveLabels = length(actualLabels[actualLabels==2])
totalNegativeLabels = length(actualLabels[actualLabels==5])
BalancedAccuracyRate = (count_tp/totalPositiveLabels+count_tn/totalNegativeLabels)/2
cat("TP",count_tp,"\n","FN",count_fn,"\n","TN",count_tn,"\n","FP",count_fp,"\n")
return(BalancedAccuracyRate)
}
Matrix(testGradientDescent(train,trainGradientDescent(train,train_labels,0.001,0)),train_labels)
